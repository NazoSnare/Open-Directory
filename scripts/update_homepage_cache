#!/usr/bin/env node

require('console.mute');

const process = require("../public/static/js/process.js");
const fs = require("fs");


const cached_raw_file = __dirname + "/../public/static/js/cached_raw.js";
const cached_homepage_file = __dirname + "/../public/static/js/cached_homepage.js";
const cached_items_file = __dirname + "/../public/static/js/cached_items.js";
const num_to_fetch = 10000;
const num_results_required = 900;

const start_time = (new Date()).getTime();


if (!fs.existsSync(cached_raw_file)) {
    throw "expected cache file to already exist...what's going on?";
}

if (!fs.existsSync(cached_items_file)) {
    throw "expected cache items file to already exist...what's going on?";
}

if (!fs.existsSync(cached_homepage_file)) {
    throw "expected cache items file to already exist...what's going on?";
}

process.fetch_from_network(null, 0, num_to_fetch, [], false).then(rows => {

    if (rows.lenth == 0) {
        throw "unable to fetch valid data from network";
    } else if (rows.length < num_results_required) {
        throw "unable to fetch enough valid data from network";
    } else {
        console.log("successfully fetched from the network");

        console.mute();
        const txpool = process.processOpenDirectoryTransactions(rows);
        const results = process.processResults(rows, txpool);
        if (results.length < 100) {
            throw "expected processed results to be more";
        }

        var data = console.resume();

        const raw_output = JSON.stringify(rows);
        try {
            fs.writeFileSync(cached_raw_file, raw_output, "utf8");
        } catch (e) {
            console.log("Error writing cached raw file", cached_raw_file);
            throw e;
        }

        const homepage_output = "const CACHED_HOMEPAGE = " + JSON.stringify(rows) + ";";
        try {
            fs.writeFileSync(cached_homepage_file, homepage_output, "utf8");
        } catch (e) {
            console.log("Error writing cached homepage file", cached_homepage_file);
            throw e;
        }

        const results_output = JSON.stringify(results);
        try {
            fs.writeFileSync(cached_items_file, results_output, "utf8");
        } catch (e) {
            console.log("Error writing cached results file", cached_items_file);
            throw e;
        }

        const end_time = (new Date()).getTime();
        const elapsed_time = (end_time - start_time) / 1000;

        console.log("successfully updated cache file at ", new Date(), "with", rows.length, "raw rows and", results.length, "results â€” took", elapsed_time, "seconds");
    }
}).catch(e => {
    console.log("error", e);
});

